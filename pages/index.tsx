import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '../styles/Home.module.css'
import { useState } from 'react'

const inter = Inter({ subsets: ['latin'] })

// export default로 선언된 부분은 페이지로 생각해주세요
export default function Home() {

  // state는 페이지에서 들고있을 값을 의미한다.
  // 배열 첫번째는 값이고, 그 값을 바꾸려면 두번째 배열에 들어가는 set으로 시작하는 것을 사용하여 값을 바꾼다.
  // useState() <-- 괄호안에는 초기에 세팅될 값을 넣는다.
  const [number, setNumber] = useState(0); // 계산기에 숫자를 표시하기 위한 state(상태 변수)
  const [holdNumber, setHoldNumber] = useState(0); // 더하기 빼기등 을 눌렀을때 표시된 숫자를 들고있을 변수
  const [operation, setOperation] = useState(''); // 더하기, 빼기 등의 명령어를 담는 변수

  // number state(변수)를 변경하는 함수입니다.
  const handleChangeNumber = (enteredNumber) => {
    // 계산기는 숫자를 계속 붙여주기 때문에 number 변수를 string으로 입력받은다음
    // enteredNumber로 입력받은 숫자를 더해주고 마지막에 parseFloat로 숫자로 바꿔준다.
    setNumber(parseFloat(String(number) + enteredNumber))
  }

  // <- 버튼을 눌렀을때 숫자를 지워주는 함수입니다.
  const handleRemoveNumber = () => {
    // numberString으로 선언한 변수에 number을 string 자료형으로 바꾼 값을 넣어준다.
    const numberString = String(number)

    // 조건문을 선언할 건데, 조건문은 if (조건식) 으로 선언한다.
    // number에 값을 세팅할때 numberString의 길이가 1이면, 0으로 값을세팅한다
    // string 자료형에서 .length 라는 키워드를 사용하면 문자열의 길이를 알 수 있다
    // === 은 같을때를 의미한다.
    if (numberString.length === 1) {
      setNumber(0)
      // else문은 위의 조건식에 맞지 않는 경우 처리할 때 사용한다.
    } else {
      // numberString.slice 는 문자열을 자르는 함수로 abc라는 문자가 있을때 'abc'.slice(0,1) 을 하면 'a'만 나오게된다
      setNumber(parseFloat(numberString.slice(0, numberString.length - 1)))
    }
  }

  // 더하기, 빼기, 나누기, 나머지 등의 버튼을 눌렀을때 처리하는 함수
  const handleClickOperation = (enteredOperation) => {
    // 표시된 숫자가 0이 아닌경우에만 처리한다.
    // 아닌 경우를 비교할땐 !== 를 사용한다.
    if (number !== 0) {
      // 더하기 빼기 등의 입력받은 값을 세팅한다.
      setOperation(enteredOperation)

      // 기존에 입력된 값을 세팅한다.
      setHoldNumber(number);

      // 화면에 표시된값을 0으로 초기화한다.
      setNumber(0);
    }
  }

  // = 을 눌렀을때 결과값을 표시하도록 세팅하는 함수
  const handleCalculation = () => {
    
    // switch case 문이라고하며, 변수에 들어오는 값이 정해져있을때 사용합니다.
    // switch () 괄호 안에는 값을 비교할 변수를 넣어줍니다. 
    // 여기에서는 더하기 빼기 등을 구분할 operation 변수를 넣어줍니다.
    switch (operation) {
      // case문에는 더하기, 빼기 등의 기호에 맞는 값을 넣어줍니다.
      case '+':
        // + 기호는 더하기이기 때문에 holdNumber(메인 숫자) + number화면에 표시된값을 더해줍니다.
        setNumber(holdNumber + number)
        // 처리 이후에는 항상 break;를 넣어줍니다. 이를 안넣으면 아래 case 구문이 또 실행됩니다.
        break;
      case '-':
        setNumber(holdNumber - number)
        break;
      case '*':
        setNumber(holdNumber * number)
        break;
      case '/':
        setNumber(holdNumber / number)
        break;
      case '%':
        setNumber(holdNumber % number)
        break;
      default:
        setNumber(holdNumber + number)
        break
    }
    setHoldNumber(0)
  }

  // html을 작성하는 곳입니다.
  return (
    <>
    {/* Head는 페이지의 속성을 설정하는 태그입니다. */}
      <Head>
        {/* title은 페이지의 제목을 변경하는 태그입니다. */}
        <title>계산기</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        {/* link는 페이지의 아이콘을 변경하는 태그입니다. */}
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {/* div는 세로로 쌓이는 태그입니다. */}
        {/* 태그는 항상 열고 닫히는 구조입니다. 
        <div> <-- 이것이 여는 태그이며,
        </div> <-- 이것이 닫는 태그입니다. 
        
        태그사이에는 값을 넣을수 있습니다.*/}
        {/* 태그에 스타일을 부여하고 싶을땐 className을 이용하여
        styles폴더에 css로 선언한 파일을 불러와서 그 클래스 이름을 넣어서 사용합니다. */}
        {/* 아래의 div 태그에 부여할 스타일은 container이라는 클래스를 선언하여 부여해보겠습니다. */}
        <div className={styles.container}>
          <div className={styles.calculated}>
          {number}
          </div>
          <div className={styles.row}>
            {/* button 태그는 가로로 쌓이며, 버튼의 모양을 가지고있는 태그입니다. */}
            <button className={styles.btn} >.</button>
            {/* onClick은 클릭했을때 이벤트를 발생시키는 속성입니다. 이 속성에는 함수를 넣어줍니다 */}
            {/* 함수에 값을 넘길때는 onClick={() =>함수명(함수에 넘길 값)} 이런식으로 사용하고
             넘길 값이 없다면 onClick={함수명} 으로 넣어주면됩니다. 이 방식을 손으로 익혀주세요
            */}
            <button className={styles.btn} onClick={() =>handleClickOperation('%')}>%</button>
            <button className={styles.btn} onClick={() =>setNumber(0)}>AC</button>
            <button className={styles.btn} onClick={handleRemoveNumber}>{'<-'}</button>
          </div>
          <div className={styles.row}>
            <button className={styles.btn} onClick={() =>handleChangeNumber(1)}>1</button>
            <button className={styles.btn} onClick={() =>handleChangeNumber(2)}>2</button>
            <button className={styles.btn} onClick={() =>handleChangeNumber(3)}>3</button>
            <button className={styles.btn} onClick={() =>handleClickOperation('+')}>+</button>
          </div>
          <div className={styles.row}>
            <button className={styles.btn} onClick={() =>handleChangeNumber(4)}>4</button>
            <button className={styles.btn} onClick={() =>handleChangeNumber(5)}>5</button>
            <button className={styles.btn} onClick={() =>handleChangeNumber(6)}>6</button>
            <button className={styles.btn} onClick={() =>handleClickOperation('-')}>-</button>
          </div>
          <div className={styles.row}>
            <button className={styles.btn} onClick={() =>handleChangeNumber(7)}>7</button>
            <button className={styles.btn} onClick={() =>handleChangeNumber(8)}>8</button>
            <button className={styles.btn} onClick={() =>handleChangeNumber(9)}>9</button>
            <button className={styles.btn} onClick={() =>handleClickOperation('*')}>*</button>
          </div>
          <div className={styles.row}>
            <button className={styles.btn} onClick={() =>handleChangeNumber(0)}>0</button>
            <button className={styles.btn}>_</button>
            <button className={styles.btn} onClick={handleCalculation}>=</button>
            <button className={styles.btn} onClick={() =>handleClickOperation('/')}>/</button>
          </div>
        </div>
      </main>
    </>
  )
}
